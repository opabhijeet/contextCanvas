{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file://C%3A/CodeRelay/main/contextCanvas/app/api/upload/route.js"],"sourcesContent":["import { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { NextResponse } from \"next/server\";\r\nimport multer from \"multer\";\r\n\r\nconst s3Client = new S3Client({\r\n    region: process.env.AWS_REGION || \"us-east-1\",\r\n    credentials: {\r\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n    },\r\n});\r\n\r\nconst upload = multer({\r\n    storage: multer.memoryStorage(),\r\n    limits: { fileSize: 5 * 1024 * 1024 }, // 5 MB\r\n});\r\n\r\nexport async function POST(req) {\r\n    const formData = await req.formData();\r\n    const file = formData.get(\"file\");\r\n\r\n    if (!file) {\r\n        return NextResponse.json({ message: \"No file uploaded or file type not allowed.\" }, { status: 400 });\r\n    }\r\n\r\n    const tags = formData.get(\"tags\");\r\n    if (!tags) {\r\n        return NextResponse.json({ message: \"Tags are required.\" }, { status: 400 });\r\n    }\r\n\r\n    const params = {\r\n        Bucket: process.env.S3_BUCKET_NAME,\r\n        Key: file.name,\r\n        Body: Buffer.from(await file.arrayBuffer()),\r\n        ContentType: file.type,\r\n    };\r\n\r\n    try {\r\n        await s3Client.send(new PutObjectCommand(params));\r\n        const s3Location = `https://${process.env.S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${file.name}`;\r\n        return NextResponse.json({ message: \"File uploaded successfully.\", fileUrl: s3Location }, { status: 200 });\r\n    } catch (err) {\r\n        return NextResponse.json({ message: \"Upload failed.\", error: err.message }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,WAAW,IAAI,iJAAA,CAAA,WAAQ,CAAC;IAC1B,QAAQ,QAAQ,GAAG,CAAC,UAAU,IAAI;IAClC,aAAa;QACT,aAAa,QAAQ,GAAG,CAAC,iBAAiB;QAC1C,iBAAiB,QAAQ,GAAG,CAAC,qBAAqB;IACtD;AACJ;AAEA,MAAM,SAAS,CAAA,GAAA,iIAAA,CAAA,UAAM,AAAD,EAAE;IAClB,SAAS,iIAAA,CAAA,UAAM,CAAC,aAAa;IAC7B,QAAQ;QAAE,UAAU,IAAI,OAAO;IAAK;AACxC;AAEO,eAAe,KAAK,GAAG;IAC1B,MAAM,WAAW,MAAM,IAAI,QAAQ;IACnC,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,MAAM;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6C,GAAG;YAAE,QAAQ;QAAI;IACtG;IAEA,MAAM,OAAO,SAAS,GAAG,CAAC;IAC1B,IAAI,CAAC,MAAM;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAqB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,MAAM,SAAS;QACX,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAClC,KAAK,KAAK,IAAI;QACd,MAAM,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW;QACxC,aAAa,KAAK,IAAI;IAC1B;IAEA,IAAI;QACA,MAAM,SAAS,IAAI,CAAC,IAAI,iJAAA,CAAA,mBAAgB,CAAC;QACzC,MAAM,aAAa,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;QAClH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA+B,SAAS;QAAW,GAAG;YAAE,QAAQ;QAAI;IAC5G,EAAE,OAAO,KAAK;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAkB,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACJ"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}