{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/CodeRelay/main/contextCanvas/convex/_generated/api.js"],"sourcesContent":["/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport { anyApi } from \"convex/server\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\nexport const api = anyApi;\nexport const internal = anyApi;\n"],"names":[],"mappings":"AAAA,kBAAkB,GAClB;;;;;;;CAOC;;;;AAED;AAAA;;AAUO,MAAM,MAAM,wJAAA,CAAA,SAAM;AAClB,MAAM,WAAW,wJAAA,CAAA,SAAM"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/CodeRelay/main/contextCanvas/app/api/liveblocks-auth/route.ts"],"sourcesContent":["import { auth, currentUser } from \"@clerk/nextjs/server\";\r\nimport { Liveblocks } from \"@liveblocks/node\";\r\nimport { api } from \"@/convex/_generated/api\";\r\nimport { ConvexHttpClient } from \"convex/browser\";\r\n\r\nconst convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\r\n\r\nconst liveBlocks = new Liveblocks({\r\n  secret: process.env.LIVEBLOCKS_SECRET_KEY!,\r\n});\r\n\r\nexport async function POST(request: Request) {\r\n  const authorization = await auth();\r\n  const user = await currentUser();\r\n\r\n  if (!authorization || !user) {\r\n    return new Response(\"Unauthorized\", { status: 403 });\r\n  }\r\n\r\n  const { room } = await request.json();\r\n\r\n  const board = await convex.query(api.board.get, { id: room });\r\n\r\n  if (board?.orgId !== authorization.orgId) {\r\n    return new Response(\"Unauthorized\", { status: 403 });\r\n  }\r\n\r\n  const userInfo = {\r\n    name: user.firstName || \"Teammate\",\r\n    picture: user.imageUrl,\r\n  };\r\n\r\n  const session = liveBlocks.prepareSession(user.id, { userInfo });\r\n\r\n  if (room) {\r\n    session.allow(room, session.FULL_ACCESS);\r\n  }\r\n\r\n  const { status, body } = await session.authorize();\r\n\r\n  return new Response(body, { status });\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AAAA;AAFA;AADA;AAAA;;;;;AAKA,MAAM,SAAS,IAAI,iKAAA,CAAA,mBAAgB;AAEnC,MAAM,aAAa,IAAI,wKAAA,CAAA,aAAU,CAAC;IAChC,QAAQ,QAAQ,GAAG,CAAC,qBAAqB;AAC3C;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,gBAAgB,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IAC/B,MAAM,OAAO,MAAM,CAAA,GAAA,4LAAA,CAAA,cAAW,AAAD;IAE7B,IAAI,CAAC,iBAAiB,CAAC,MAAM;QAC3B,OAAO,IAAI,SAAS,gBAAgB;YAAE,QAAQ;QAAI;IACpD;IAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;IAEnC,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,6HAAA,CAAA,MAAG,CAAC,KAAK,CAAC,GAAG,EAAE;QAAE,IAAI;IAAK;IAE3D,IAAI,OAAO,UAAU,cAAc,KAAK,EAAE;QACxC,OAAO,IAAI,SAAS,gBAAgB;YAAE,QAAQ;QAAI;IACpD;IAEA,MAAM,WAAW;QACf,MAAM,KAAK,SAAS,IAAI;QACxB,SAAS,KAAK,QAAQ;IACxB;IAEA,MAAM,UAAU,WAAW,cAAc,CAAC,KAAK,EAAE,EAAE;QAAE;IAAS;IAE9D,IAAI,MAAM;QACR,QAAQ,KAAK,CAAC,MAAM,QAAQ,WAAW;IACzC;IAEA,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,SAAS;IAEhD,OAAO,IAAI,SAAS,MAAM;QAAE;IAAO;AACrC"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}