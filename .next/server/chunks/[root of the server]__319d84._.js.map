{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/abhijeet/repos/contextCanvas/app/api/upload/route.js"],"sourcesContent":["import { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { NextResponse } from \"next/server\";\n\n// Initialize S3 Client\nconst s3Client = new S3Client({\n    region: process.env.AWS_REGION || \"us-east-1\",\n    credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    },\n});\n\nexport async function POST(req) {\n    try {\n        // Parse the request body as JSON\n        const body = await req.json();\n\n        // Extract the base64 image and tags from the request body\n        const { image, tags } = body;\n\n        if (!image) {\n            return NextResponse.json({ message: \"No image provided.\" }, { status: 400 });\n        }\n\n        if (!tags) {\n            return NextResponse.json({ message: \"Tags are required.\" }, { status: 400 });\n        }\n\n        // Convert base64 image to a Buffer\n        const base64Data = image.replace(/^data:image\\/\\w+;base64,/, \"\"); // Remove the data URL prefix\n        const buffer = Buffer.from(base64Data, \"base64\");\n\n        // Generate a unique file name\n        const fileName = `canvas-image-${Date.now()}.png`;\n\n        // Upload the image to S3\n        const params = {\n            Bucket: process.env.S3_BUCKET_NAME,\n            Key: fileName,\n            Body: buffer,\n            ContentType: \"image/png\", // Set the content type\n        };\n\n        await s3Client.send(new PutObjectCommand(params));\n\n        // Construct the S3 file URL\n        const s3Location = `https://${process.env.S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;\n\n        // Return the success response\n        return NextResponse.json({ message: \"File uploaded successfully.\", fileUrl: s3Location }, { status: 200 });\n    } catch (err) {\n        console.error(\"Error uploading image:\", err);\n        return NextResponse.json({ message: \"Upload failed.\", error: err.message }, { status: 500 });\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,uBAAuB;AACvB,MAAM,WAAW,IAAI,iJAAA,CAAA,WAAQ,CAAC;IAC1B,QAAQ,QAAQ,GAAG,CAAC,UAAU,IAAI;IAClC,aAAa;QACT,aAAa,QAAQ,GAAG,CAAC,iBAAiB;QAC1C,iBAAiB,QAAQ,GAAG,CAAC,qBAAqB;IACtD;AACJ;AAEO,eAAe,KAAK,GAAG;IAC1B,IAAI;QACA,iCAAiC;QACjC,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,0DAA0D;QAC1D,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG;QAExB,IAAI,CAAC,OAAO;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,mCAAmC;QACnC,MAAM,aAAa,MAAM,OAAO,CAAC,4BAA4B,KAAK,6BAA6B;QAC/F,MAAM,SAAS,OAAO,IAAI,CAAC,YAAY;QAEvC,8BAA8B;QAC9B,MAAM,WAAW,CAAC,aAAa,EAAE,KAAK,GAAG,GAAG,IAAI,CAAC;QAEjD,yBAAyB;QACzB,MAAM,SAAS;YACX,QAAQ,QAAQ,GAAG,CAAC,cAAc;YAClC,KAAK;YACL,MAAM;YACN,aAAa;QACjB;QAEA,MAAM,SAAS,IAAI,CAAC,IAAI,iJAAA,CAAA,mBAAgB,CAAC;QAEzC,4BAA4B;QAC5B,MAAM,aAAa,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,eAAe,EAAE,UAAU;QAEjH,8BAA8B;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA+B,SAAS;QAAW,GAAG;YAAE,QAAQ;QAAI;IAC5G,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAkB,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACJ"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}